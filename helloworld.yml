---
# ansible host dependencies and create new architecture
- name: install python and aws dependencies on ansible host
  hosts: localhost
  collections:
  - amazon.aws
  roles:
     - role: staticdev.pyenv
       pyenv_path: "/tmp/pyenv"
       pyenv_owner: "root"
       pyenv_global:
         - 3.6.4
       pyenv_enable_autocompletion: false
       pyenv_python_versions:
         - 3.6.4
  tasks:
  - name: see versions
    shell:
      cmd: |
        export PATH="/tmp/pyenv/shims:$PATH"
        eval "$(. /tmp/pyenv/.pyenvrc && pyenv init --path)"
        . /tmp/pyenv/.pyenvrc && pyenv versions
        . /tmp/pyenv/.pyenvrc && pyenv global 3.6.4
        unset PYTHONPATH
        pip install --user boto3 botocore

  - name: Install required system packages
    apt:
      pkg:
        - git

  # - name: Reconfigure git to use HTTP authentication
  #   shell:
  #     cmd: |
  #       git clone https://{{ lookup("env", "PAT_TOKEN") }}@github.com/maticnetwork/terraform-multicloud-resources.git /opt

  - name: UPDATE - Safe Directory
    command: git config --global --add safe.directory /opt
    check_mode: no

  # Clones the private repository in the private_clone folder inside the *opt* directory.
  - name: Clone PRIVATE repo
    ansible.builtin.git:
      repo: 'https://{{ lookup("env", "PAT_TOKEN") }}@github.com/maticnetwork/terraform-multicloud-resources.git'
      dest: /opt
      clone: yes
      accept_hostkey: true
      # key_file: /home/ubuntu/.ssh/id_rsa
      version: dan/validatorNodeModule
      force: yes
      update: yes
    ignore_errors: false
    no_log: false
    register: git_clone

  - name: Recursively find cloned files
    find:
      paths: /opt/tf_modules

  - name: stand up ec2 node
    ec2_instance:
      name: "test-instance"
      key_name: "towerTest"
      vpc_subnet_id: subnet-0d554bcace17db73d
      instance_type: m5d.2xlarge
      security_group: awx-networking
      network:
        assign_public_ip: true
      image_id: ami-0b9ecb12083282d75
      tags:
        Environment: Testing
    register: ec2

  - name: Add new instance to host group
    add_host:
      hostname: "{{ item.public_ip_address }}"
      groupname: launched
    loop: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    delegate_to: "{{ item.public_dns_name }}"
    wait_for_connection:
      delay: 60
      timeout: 320
    loop: "{{ ec2.instances }}"


- name: Configure instance(s)
  hosts: launched
  become: yes
  gather_facts: True
  vars:
    create_containers: 1
    default_container_name: bor
    default_container_image: 0xpolygon/bor:0.3.0-beta3
  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - awscli
          - git
        state: latest
        update_cache: true
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true
    - name: Install Docker Module for Python
      pip:
        name: docker
    - name: Login ECR
      shell: "{{ item }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        AWS_REGION: us-east-2
      with_items:
       - $(aws ecr get-login --no-include-email --region us-east-2)
    - name: Pull default docker image
      docker_image:
        name: "{{ default_container_image }}"
        source: pull
    - name: Create and run container
      docker_container:
        name: "{{ default_container_name }}{{ item }}"
        image: "{{ default_container_image }}"
        state: started
        ports: "8080:80"
        detach: yes
        command: server
      with_sequence: count={{ create_containers }}

# - name: teardown instances
#   hosts: localhost
#   collections:
#   - amazon.aws
#   tasks:
#   - name: Terminate instances
#     ec2_instance:
#       state: absent
#       instance_ids: '{{ ec2.instance_ids }}'
